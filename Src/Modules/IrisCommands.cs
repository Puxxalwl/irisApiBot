using System.Text.RegularExpressions;
using IrisClient.Services;
using Src.Utils;
using WTelegram;
using WTelegram.Types;

namespace Src.Mosules
{
    public class IrisCommands
    {
        public void Register()
        {
            Router.addHandler(
                new[] { "–º–µ—à–æ–∫", "bag", "–±–∞–ª–∞–Ω—Å" },
                new Regex(@"^[./! ]?[ ]?(–º–µ—à–æ–∫ –±–æ—Ç(?:a)?|bag bot|–±–∞–ª–∞–Ω—Å –±–æ—Ç(?:a)?)[ ]*(?:\n+.*)?$", RegexOptions.Compiled | RegexOptions.IgnoreCase | RegexOptions.Singleline),
                async (Message Msg, Bot IrisBot, Match _Match, IrisApiClient IrisApi) =>
                {
                    if (Msg.From == null) return;

                    var Balance = await IrisApi.GetBalance();

                    if (Balance.sweets == 0.0 || Balance.gold == 0.0 || Balance.donate_score == 0)
                    {
                        await Router.MessageSend(Msg, Msg.Chat.Id, IrisBot, "üìù –ú–µ—à–æ–∫ –±–æ—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç", true);
                        return;
                    }
                    string resultMessage = "üí∞ –í –º–µ—à–∫–µ –±–æ—Ç–∞:\n" +
                                        $"üç¨ {Balance.sweets} –∏—Ä–∏—Å–æ–∫\n" +
                                        $"üåï {Balance.gold} –∏—Ä–∏—Å-–≥–æ–ª–¥\n" +
                                        $"ü•Ø {Balance.donate_score} –æ—á–∫–æ–≤ –¥–æ–Ω–∞—Ç–∞\n\n" +
                                        "üí¨ –ó–∞–ø–∞—Å—ã –±–æ—Ç–∞ –º–æ–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å, –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É \"–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–æ—Ç–∞ (—á–∏—Å–ª–æ) @id\"";

                    await Router.MessageSend(Msg, Msg.Chat.Id, IrisBot, resultMessage, true);
                }
            );

            Router.addHandler(
                new[] { "+–º–µ—à–æ–∫", "-–º–µ—à–æ–∫", "–∑–∞–ø—Ä–µ—Ç–∏—Ç—å", "—Ä–∞–∑—Ä–µ—à–∏—Ç—å" },
                new Regex(@"^[./! ]?[ ]?(-[ ]?|/+[ ]?|–∑–∞–ø—Ä–µ—Ç–∏—Ç—å |—Ä–∞–∑—Ä–µ—à–∏—Ç—å )–º–µ—à–æ–∫[ ]*(?:\n+.*)?$", RegexOptions.Compiled | RegexOptions.IgnoreCase | RegexOptions.Singleline),
                async (Message Msg, Bot IrisBot, Match Match, IrisApiClient IrisApi) =>
                {
                    if (Msg.From == null) return;

                    string value = Match.Groups[1].Value.ToLower();
                    bool Status = value == "+" || value == "—Ä–∞–∑—Ä–µ—à–∏—Ç—å";

                    var result = await IrisApi.OpenBag(Status);

                    if (result.response == "true")
                    {
                        await Router.MessageSend(Msg, Msg.Chat.Id, IrisBot, $"üìù –í—ã {(Status == true ? "–æ—Ç–∫—Ä—ã–ª–∏" : "–∑–∞–∫—Ä—ã–ª–∏")} –º–µ—à–æ–∫ –¥–ª—è –¥—Ä—É–≥–∏—Ö –≥–ª–∞–∑");
                        return;
                    }
                    else
                    {
                        await Router.MessageSend(Msg, Msg.Chat.Id, IrisBot, $"üìù –°—Ç–∞—Ç—É—Å –º–µ—à–∫–∞ –∏ —Ç–∞–∫: {(Status == true ? "–æ—Ç–∫—Ä—ã—Ç" : "–∑–∞–∫—Ä—ã—Ç")}");
                        return;
                    }
                }
            );

            Router.addHandler(
                new[] { "–∑–∞–ø—Ä–µ—Ç–∏—Ç—å", "—Ä–∞–∑—Ä–µ—à–∏—Ç—å", "+–ø–µ—Ä–µ–≤–æ–¥—ã", "-–ø–µ—Ä–µ–≤–æ–¥—ã" },
                new Regex(@"^[./! ]?[ ]?(-[ ]?|/+[ ]?|–∑–∞–ø—Ä–µ—Ç–∏—Ç—å |—Ä–∞–∑—Ä–µ—à–∏—Ç—å )–ø–µ—Ä–µ–≤–æ–¥—ã (–¥–ª—è –≤—Å–µ—Ö|(.+))[ ]*(?:\n+.*)?$", RegexOptions.Compiled | RegexOptions.IgnoreCase | RegexOptions.Singleline),
                async (Message Msg, Bot IrisBot, Match Match, IrisApiClient IrisApi) =>
                {
                    string statusString = Match.Groups[1].Value.ToLower();
                    string Entity = Match.Groups[2].Value.ToLower();
                    bool Status = statusString == "+" || statusString == "—Ä–∞–∑—Ä–µ—à–∏—Ç—å";


                    if (Entity == "–¥–ª—è –≤—Å–µ—Ö")
                    {
                        var result = await IrisApi.AllowAll(Status);
                        if (result.response == "true")
                        {
                            await Router.MessageSend(Msg, Msg.Chat.Id, IrisBot, $"üìù –í—ã {(Status == true ? "—Ä–∞–∑—Ä–µ—à–∏–ª–∏" : "–∑–∞–ø—Ä–µ—Ç–∏–ª–∏")} –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö");
                            return;
                        }
                        else
                        {
                            await Router.MessageSend(Msg, Msg.Chat.Id, IrisBot, $"üìù –°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∏ —Ç–∞–∫: {(Status == true ? "—Ä–∞–∑—Ä–µ—à–µ–Ω" : "–∑–∞–ø—Ä–µ—â—ë–Ω")}");
                            return;
                        }
                    }
                    else
                    {
                        // –ü–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–æ –∏ —Å –∫–æ—Å—Ç—ã–ª—è–º–∏
                        return;
                        
                    }
                }
            );
        }
    }
}